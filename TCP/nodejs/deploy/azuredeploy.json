{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "canadacentral"
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "[concat('ContainerAppEnv-', uniqueString(resourceGroup().id))]"
    },
    "deployTcpService": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If you set this parameter to true, the TCP service ACA will be deployed."
      }
    },
    "useExternalIngress": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "By default, this parameter will deploy the TCP service ACA with External ingress enabled. If you set this parameter to false, the TCP service ACA will use Internal ingress."
      }
    },
    "deployTcpClient": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If you set this parameter to true, the TCP client ACA will be deployed."
      }
    },
    "tcpserviceCI": {
      "type": "string",
      "defaultValue": "docker.io/gfakedocker/tcpservicenodejs:latest"
    },
    "tcpservice": {
      "type": "string",
      "defaultValue": "tcpservicenodejs"
    },
    "tcpclientCI": {
      "type": "string",
      "defaultValue": "docker.io/gfakedocker/tcpclientnodejs:latest"
    },
    "tcpclient": {
      "type": "string",
      "defaultValue": "tcpclientnodejs"
    },
    "EXPOSED_PORT": {
      "type": "string",
      "defaultValue": "6000"
    },
    "usesWorkloadProfile": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If you deployed a workload-profile enabled Container App Environment, set the usesWorkloadProfile parameter to true so that the Container App is deployed to the Consumption profile. Otherwise, if you deployed a Container App Environment without workload profiles enabled, set this parameter to false."
      }
    }
  },
  "variables": {
    "APP_PORT_SERVICE": "5000",
    "APP_PORT_CLIENT": "4000"
  },
  "resources": [
    {
      "condition": "[parameters('deployTcpService')]",
      "name": "[parameters('tcpservice')]",
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('location')]",
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]",
        "workloadProfileName": "[if(parameters('usesWorkloadProfile'), 'Consumption', json('null'))]",
        "configuration": {
          "ingress": {
            "external": "[parameters('useExternalIngress')]",
            "transport": "Tcp",
            "targetPort": "[variables('APP_PORT_SERVICE')]",
            "exposedPort": "[parameters('EXPOSED_PORT')]"
          }
        },
        "template": {
          "containers": [
            {
              "name": "[parameters('tcpservice')]",
              "image": "[parameters('tcpserviceCI')]",
              "env": [
                {
                  "name": "APP_PORT",
                  "value": "[variables('APP_PORT_SERVICE')]"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": "1",
            "maxReplicas": "3",
            "rules": [
              {
                "name": "tcpcalingrule",
                "tcp": {
                  "metadata": {
                    "concurrentRequests": "5"
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "condition": "[parameters('deployTcpClient')]",
      "name": "[parameters('tcpclient')]",
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('location')]",
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]",
        "workloadProfileName": "[if(parameters('usesWorkloadProfile'), 'Consumption', json('null'))]",
        "template": {
          "containers": [
            {
              "name": "[parameters('tcpclient')]",
              "image": "[parameters('tcpclientCI')]",
              "env": [
                {
                  "name": "APP_PORT",
                  "value": "[variables('APP_PORT_CLIENT')]"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": "1",
            "maxReplicas": "1"
          }
        }
      }
    }
  ]
}